
Booth23-Controller-Firmware2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080035b8  080035b8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035b8  080035b8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000088  08003648  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08003648  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bfa  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187e  00000000  00000000  00029cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e17  00000000  00000000  0002cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b58e  00000000  00000000  000439df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883e7  00000000  00000000  0004ef6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  000d73a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003538 	.word	0x08003538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003538 	.word	0x08003538

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd47 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f853 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa49 	bl	80005f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f891 	bl	8000284 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000162:	f000 f8e7 	bl	8000334 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000166:	f000 f939 	bl	80003dc <MX_TIM3_Init>
  MX_TIM4_Init();
 800016a:	f000 f98b 	bl	8000484 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800016e:	f000 fa15 	bl	800059c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000172:	2100      	movs	r1, #0
 8000174:	481b      	ldr	r0, [pc, #108]	; (80001e4 <main+0x98>)
 8000176:	f001 fd25 	bl	8001bc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800017a:	2108      	movs	r1, #8
 800017c:	4819      	ldr	r0, [pc, #100]	; (80001e4 <main+0x98>)
 800017e:	f001 fd21 	bl	8001bc4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000182:	210c      	movs	r1, #12
 8000184:	4817      	ldr	r0, [pc, #92]	; (80001e4 <main+0x98>)
 8000186:	f001 fd1d 	bl	8001bc4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800018a:	213c      	movs	r1, #60	; 0x3c
 800018c:	4816      	ldr	r0, [pc, #88]	; (80001e8 <main+0x9c>)
 800018e:	f001 fe5d 	bl	8001e4c <HAL_TIM_Encoder_Start>
  drive_motor(&motor1, BACK, 65000);
 8000192:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8000196:	2103      	movs	r1, #3
 8000198:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0xa0>)
 800019a:	f000 fab1 	bl	8000700 <drive_motor>

  uint8_t MSG[50] = {'\0'};
 800019e:	2300      	movs	r3, #0
 80001a0:	603b      	str	r3, [r7, #0]
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	222e      	movs	r2, #46	; 0x2e
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fd43 	bl	8002c34 <memset>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	int val = (TIM1->CNT)>>2;
 80001ae:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <main+0xa4>)
 80001b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
	sprintf(MSG, "%d %d %d\n\r", (TIM1->CNT)>>2, (TIM2->CNT)>>2, (TIM3->CNT)>>2);
 80001b6:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <main+0xa4>)
 80001b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ba:	089a      	lsrs	r2, r3, #2
 80001bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c2:	0899      	lsrs	r1, r3, #2
 80001c4:	4b0b      	ldr	r3, [pc, #44]	; (80001f4 <main+0xa8>)
 80001c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c8:	089b      	lsrs	r3, r3, #2
 80001ca:	4638      	mov	r0, r7
 80001cc:	9300      	str	r3, [sp, #0]
 80001ce:	460b      	mov	r3, r1
 80001d0:	4909      	ldr	r1, [pc, #36]	; (80001f8 <main+0xac>)
 80001d2:	f002 fd37 	bl	8002c44 <siprintf>
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80001d6:	4639      	mov	r1, r7
 80001d8:	2364      	movs	r3, #100	; 0x64
 80001da:	2232      	movs	r2, #50	; 0x32
 80001dc:	4807      	ldr	r0, [pc, #28]	; (80001fc <main+0xb0>)
 80001de:	f002 fb94 	bl	800290a <HAL_UART_Transmit>
  {
 80001e2:	e7e4      	b.n	80001ae <main+0x62>
 80001e4:	2000017c 	.word	0x2000017c
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	20000000 	.word	0x20000000
 80001f0:	40012c00 	.word	0x40012c00
 80001f4:	40000400 	.word	0x40000400
 80001f8:	08003550 	.word	0x08003550
 80001fc:	200001c4 	.word	0x200001c4

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 fd10 	bl	8002c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000232:	2300      	movs	r3, #0
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fffd 	bl	8001240 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800024c:	f000 fada 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fa6a 	bl	8001744 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000276:	f000 fac5 	bl	8000804 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b08c      	sub	sp, #48	; 0x30
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	2224      	movs	r2, #36	; 0x24
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fcce 	bl	8002c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <MX_TIM1_Init+0xa8>)
 80002a2:	4a23      	ldr	r2, [pc, #140]	; (8000330 <MX_TIM1_Init+0xac>)
 80002a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <MX_TIM1_Init+0xa8>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <MX_TIM1_Init+0xa8>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM1_Init+0xa8>)
 80002b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ba:	4b1c      	ldr	r3, [pc, #112]	; (800032c <MX_TIM1_Init+0xa8>)
 80002bc:	2200      	movs	r2, #0
 80002be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c0:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_TIM1_Init+0xa8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c6:	4b19      	ldr	r3, [pc, #100]	; (800032c <MX_TIM1_Init+0xa8>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002cc:	2301      	movs	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002d0:	2300      	movs	r3, #0
 80002d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002d4:	2301      	movs	r3, #1
 80002d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002e4:	2301      	movs	r3, #1
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	4619      	mov	r1, r3
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <MX_TIM1_Init+0xa8>)
 80002f8:	f001 fd06 	bl	8001d08 <HAL_TIM_Encoder_Init>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000302:	f000 fa7f 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000306:	2300      	movs	r3, #0
 8000308:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4619      	mov	r1, r3
 8000312:	4806      	ldr	r0, [pc, #24]	; (800032c <MX_TIM1_Init+0xa8>)
 8000314:	f002 fa4e 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800031e:	f000 fa71 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	3730      	adds	r7, #48	; 0x30
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000a4 	.word	0x200000a4
 8000330:	40012c00 	.word	0x40012c00

08000334 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b08c      	sub	sp, #48	; 0x30
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	2224      	movs	r2, #36	; 0x24
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fc76 	bl	8002c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000356:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000358:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000364:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_TIM2_Init+0xa4>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_TIM2_Init+0xa4>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000378:	2301      	movs	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000380:	2301      	movs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800038c:	2300      	movs	r3, #0
 800038e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000390:	2301      	movs	r3, #1
 8000392:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	4619      	mov	r1, r3
 80003a2:	480d      	ldr	r0, [pc, #52]	; (80003d8 <MX_TIM2_Init+0xa4>)
 80003a4:	f001 fcb0 	bl	8001d08 <HAL_TIM_Encoder_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003ae:	f000 fa29 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4806      	ldr	r0, [pc, #24]	; (80003d8 <MX_TIM2_Init+0xa4>)
 80003c0:	f002 f9f8 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003ca:	f000 fa1b 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ce:	bf00      	nop
 80003d0:	3730      	adds	r7, #48	; 0x30
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000ec 	.word	0x200000ec

080003dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	2224      	movs	r2, #36	; 0x24
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fc22 	bl	8002c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <MX_TIM3_Init+0xa0>)
 80003fa:	4a21      	ldr	r2, [pc, #132]	; (8000480 <MX_TIM3_Init+0xa4>)
 80003fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003fe:	4b1f      	ldr	r3, [pc, #124]	; (800047c <MX_TIM3_Init+0xa0>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_TIM3_Init+0xa0>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <MX_TIM3_Init+0xa0>)
 800040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_TIM3_Init+0xa0>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_TIM3_Init+0xa0>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800041e:	2301      	movs	r3, #1
 8000420:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000422:	2300      	movs	r3, #0
 8000424:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000426:	2301      	movs	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000436:	2301      	movs	r3, #1
 8000438:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	4619      	mov	r1, r3
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <MX_TIM3_Init+0xa0>)
 800044a:	f001 fc5d 	bl	8001d08 <HAL_TIM_Encoder_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000454:	f000 f9d6 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_TIM3_Init+0xa0>)
 8000466:	f002 f9a5 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000470:	f000 f9c8 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	3730      	adds	r7, #48	; 0x30
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000134 	.word	0x20000134
 8000480:	40000400 	.word	0x40000400

08000484 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08e      	sub	sp, #56	; 0x38
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	f107 0320 	add.w	r3, r7, #32
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
 80004b0:	615a      	str	r2, [r3, #20]
 80004b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004b4:	4b37      	ldr	r3, [pc, #220]	; (8000594 <MX_TIM4_Init+0x110>)
 80004b6:	4a38      	ldr	r2, [pc, #224]	; (8000598 <MX_TIM4_Init+0x114>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80004ba:	4b36      	ldr	r3, [pc, #216]	; (8000594 <MX_TIM4_Init+0x110>)
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b34      	ldr	r3, [pc, #208]	; (8000594 <MX_TIM4_Init+0x110>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80004c6:	4b33      	ldr	r3, [pc, #204]	; (8000594 <MX_TIM4_Init+0x110>)
 80004c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_TIM4_Init+0x110>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d4:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <MX_TIM4_Init+0x110>)
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004da:	482e      	ldr	r0, [pc, #184]	; (8000594 <MX_TIM4_Init+0x110>)
 80004dc:	f001 faca 	bl	8001a74 <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80004e6:	f000 f98d 	bl	8000804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f4:	4619      	mov	r1, r3
 80004f6:	4827      	ldr	r0, [pc, #156]	; (8000594 <MX_TIM4_Init+0x110>)
 80004f8:	f001 fdf4 	bl	80020e4 <HAL_TIM_ConfigClockSource>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000502:	f000 f97f 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000506:	4823      	ldr	r0, [pc, #140]	; (8000594 <MX_TIM4_Init+0x110>)
 8000508:	f001 fb03 	bl	8001b12 <HAL_TIM_PWM_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000512:	f000 f977 	bl	8000804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	4619      	mov	r1, r3
 8000524:	481b      	ldr	r0, [pc, #108]	; (8000594 <MX_TIM4_Init+0x110>)
 8000526:	f002 f945 	bl	80027b4 <HAL_TIMEx_MasterConfigSynchronization>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000530:	f000 f968 	bl	8000804 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000534:	2360      	movs	r3, #96	; 0x60
 8000536:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	4619      	mov	r1, r3
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <MX_TIM4_Init+0x110>)
 800054c:	f001 fd0c 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000556:	f000 f955 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2208      	movs	r2, #8
 800055e:	4619      	mov	r1, r3
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_TIM4_Init+0x110>)
 8000562:	f001 fd01 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800056c:	f000 f94a 	bl	8000804 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	220c      	movs	r2, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4807      	ldr	r0, [pc, #28]	; (8000594 <MX_TIM4_Init+0x110>)
 8000578:	f001 fcf6 	bl	8001f68 <HAL_TIM_PWM_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000582:	f000 f93f 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <MX_TIM4_Init+0x110>)
 8000588:	f000 fa28 	bl	80009dc <HAL_TIM_MspPostInit>

}
 800058c:	bf00      	nop
 800058e:	3738      	adds	r7, #56	; 0x38
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000017c 	.word	0x2000017c
 8000598:	40000800 	.word	0x40000800

0800059c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005a2:	4a12      	ldr	r2, [pc, #72]	; (80005ec <MX_USART2_UART_Init+0x50>)
 80005a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005c2:	220c      	movs	r2, #12
 80005c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x4c>)
 80005d4:	f002 f94c 	bl	8002870 <HAL_UART_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005de:	f000 f911 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200001c4 	.word	0x200001c4
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a38      	ldr	r2, [pc, #224]	; (80006ec <MX_GPIO_Init+0xfc>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b36      	ldr	r3, [pc, #216]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <MX_GPIO_Init+0xfc>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <MX_GPIO_Init+0xfc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <MX_GPIO_Init+0xfc>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_GPIO_Init+0xfc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <MX_GPIO_Init+0xfc>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_GPIO_Init+0xfc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR31_Pin|LD2_Pin|DIR11_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800066a:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x100>)
 800066c:	f000 fdae 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR32_Pin|DIR12_Pin|DIR22_Pin|DIR21_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f240 4131 	movw	r1, #1073	; 0x431
 8000676:	481f      	ldr	r0, [pc, #124]	; (80006f4 <MX_GPIO_Init+0x104>)
 8000678:	f000 fda8 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_GPIO_Init+0x108>)
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <MX_GPIO_Init+0x10c>)
 8000692:	f000 fc17 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR31_Pin LD2_Pin DIR11_Pin */
  GPIO_InitStruct.Pin = DIR31_Pin|LD2_Pin|DIR11_Pin;
 8000696:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2302      	movs	r3, #2
 80006a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x100>)
 80006b0:	f000 fc08 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR32_Pin DIR12_Pin DIR22_Pin DIR21_Pin */
  GPIO_InitStruct.Pin = DIR32_Pin|DIR12_Pin|DIR22_Pin|DIR21_Pin;
 80006b4:	f240 4331 	movw	r3, #1073	; 0x431
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_GPIO_Init+0x104>)
 80006ce:	f000 fbf9 	bl	8000ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2028      	movs	r0, #40	; 0x28
 80006d8:	f000 fbbd 	bl	8000e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006dc:	2028      	movs	r0, #40	; 0x28
 80006de:	f000 fbd6 	bl	8000e8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	10110000 	.word	0x10110000
 80006fc:	40011000 	.word	0x40011000

08000700 <drive_motor>:

/* USER CODE BEGIN 4 */
void drive_motor(Motor_t* motor, Direction_t dir, uint16_t speed)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
 800070c:	4613      	mov	r3, r2
 800070e:	803b      	strh	r3, [r7, #0]
	switch (dir) {
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d84e      	bhi.n	80007b4 <drive_motor+0xb4>
 8000716:	a201      	add	r2, pc, #4	; (adr r2, 800071c <drive_motor+0x1c>)
 8000718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071c:	0800072d 	.word	0x0800072d
 8000720:	0800074f 	.word	0x0800074f
 8000724:	08000771 	.word	0x08000771
 8000728:	08000793 	.word	0x08000793
		case OFF:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 0);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	889b      	ldrh	r3, [r3, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	f000 fd48 	bl	80011cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 0);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6898      	ldr	r0, [r3, #8]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	899b      	ldrh	r3, [r3, #12]
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	f000 fd40 	bl	80011cc <HAL_GPIO_WritePin>
			break;
 800074c:	e032      	b.n	80007b4 <drive_motor+0xb4>
		case BLOCK:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6818      	ldr	r0, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	889b      	ldrh	r3, [r3, #4]
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	f000 fd37 	bl	80011cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 1);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6898      	ldr	r0, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	899b      	ldrh	r3, [r3, #12]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f000 fd2f 	bl	80011cc <HAL_GPIO_WritePin>
			break;
 800076e:	e021      	b.n	80007b4 <drive_motor+0xb4>
		case FORWARD:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	4619      	mov	r1, r3
 800077c:	f000 fd26 	bl	80011cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 0);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6898      	ldr	r0, [r3, #8]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	f000 fd1e 	bl	80011cc <HAL_GPIO_WritePin>
			break;
 8000790:	e010      	b.n	80007b4 <drive_motor+0xb4>
		case BACK:
			HAL_GPIO_WritePin(motor->dir1_port, motor->dir1_pin, 0);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	889b      	ldrh	r3, [r3, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f000 fd15 	bl	80011cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motor->dir2_port, motor->dir2_pin, 1);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6898      	ldr	r0, [r3, #8]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	f000 fd0d 	bl	80011cc <HAL_GPIO_WritePin>
			break;
 80007b2:	bf00      	nop
	};

	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	8a9b      	ldrh	r3, [r3, #20]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d105      	bne.n	80007c8 <drive_motor+0xc8>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	883a      	ldrh	r2, [r7, #0]
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007c6:	e018      	b.n	80007fa <drive_motor+0xfa>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	8a9b      	ldrh	r3, [r3, #20]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d105      	bne.n	80007dc <drive_motor+0xdc>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	883b      	ldrh	r3, [r7, #0]
 80007d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80007da:	e00e      	b.n	80007fa <drive_motor+0xfa>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	8a9b      	ldrh	r3, [r3, #20]
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	d105      	bne.n	80007f0 <drive_motor+0xf0>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	691b      	ldr	r3, [r3, #16]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80007ee:	e004      	b.n	80007fa <drive_motor+0xfa>
	__HAL_TIM_SET_COMPARE(motor->pwm_tim, motor->pwm_tim_ch, speed);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	883b      	ldrh	r3, [r7, #0]
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_MspInit+0x5c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x5c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_MspInit+0x60>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_MspInit+0x60>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a40      	ldr	r2, [pc, #256]	; (8000990 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d125      	bne.n	80008e0 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000894:	4b3f      	ldr	r3, [pc, #252]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a3e      	ldr	r2, [pc, #248]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 800089a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a38      	ldr	r2, [pc, #224]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
 80008c2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EN11_Pin|EN12_Pin;
 80008c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4619      	mov	r1, r3
 80008d8:	482f      	ldr	r0, [pc, #188]	; (8000998 <HAL_TIM_Encoder_MspInit+0x124>)
 80008da:	f000 faf3 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008de:	e052      	b.n	8000986 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM2)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008e8:	d124      	bne.n	8000934 <HAL_TIM_Encoder_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b27      	ldr	r3, [pc, #156]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = EN21_Pin|EN22_Pin;
 800091a:	2303      	movs	r3, #3
 800091c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4619      	mov	r1, r3
 800092c:	481a      	ldr	r0, [pc, #104]	; (8000998 <HAL_TIM_Encoder_MspInit+0x124>)
 800092e:	f000 fac9 	bl	8000ec4 <HAL_GPIO_Init>
}
 8000932:	e028      	b.n	8000986 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_TIM_Encoder_MspInit+0x128>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d123      	bne.n	8000986 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_TIM_Encoder_MspInit+0x120>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EN31_Pin|EN32_Pin;
 800096e:	23c0      	movs	r3, #192	; 0xc0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_TIM_Encoder_MspInit+0x124>)
 8000982:	f000 fa9f 	bl	8000ec4 <HAL_GPIO_Init>
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40012c00 	.word	0x40012c00
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800
 800099c:	40000400 	.word	0x40000400

080009a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_TIM_Base_MspInit+0x34>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10b      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_TIM_Base_MspInit+0x38>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40000800 	.word	0x40000800
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_TIM_MspPostInit+0x5c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d118      	bne.n	8000a2e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_TIM_MspPostInit+0x60>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_TIM_MspPostInit+0x60>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_TIM_MspPostInit+0x60>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000a14:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000a18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_TIM_MspPostInit+0x64>)
 8000a2a:	f000 fa4b 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40000800 	.word	0x40000800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x70>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d123      	bne.n	8000aac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	61d3      	str	r3, [r2, #28]
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_UART_MspInit+0x74>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a94:	230c      	movs	r3, #12
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_UART_MspInit+0x78>)
 8000aa8:	f000 fa0c 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010800 	.word	0x40010800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f8b3 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b12:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b16:	f000 fb71 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	; (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f002 f846 	bl	8002be0 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20005000 	.word	0x20005000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000208 	.word	0x20000208
 8000b88:	20000220 	.word	0x20000220

08000b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bbe:	f7ff ffe5 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f002 f813 	bl	8002bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff fac1 	bl	800014c <main>
  bx lr
 8000bca:	4770      	bx	lr
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000bd4:	080035c0 	.word	0x080035c0
  ldr r2, =_sbss
 8000bd8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000bdc:	20000220 	.word	0x20000220

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x28>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f923 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe06 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f93b 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f903 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000018 	.word	0x20000018
 8000c68:	20000020 	.word	0x20000020
 8000c6c:	2000001c 	.word	0x2000001c

08000c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x1c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x20>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <HAL_IncTick+0x20>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000020 	.word	0x20000020
 8000c90:	2000020c 	.word	0x2000020c

08000c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <HAL_GetTick+0x10>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	2000020c 	.word	0x2000020c

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4906      	ldr	r1, [pc, #24]	; (8000d40 <__NVIC_EnableIRQ+0x34>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100

08000d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	db0a      	blt.n	8000d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	490c      	ldr	r1, [pc, #48]	; (8000d90 <__NVIC_SetPriority+0x4c>)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d6c:	e00a      	b.n	8000d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4908      	ldr	r1, [pc, #32]	; (8000d94 <__NVIC_SetPriority+0x50>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	f003 030f 	and.w	r3, r3, #15
 8000d7a:	3b04      	subs	r3, #4
 8000d7c:	0112      	lsls	r2, r2, #4
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	440b      	add	r3, r1
 8000d82:	761a      	strb	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f1c3 0307 	rsb	r3, r3, #7
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	bf28      	it	cs
 8000db6:	2304      	movcs	r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	2b06      	cmp	r3, #6
 8000dc0:	d902      	bls.n	8000dc8 <NVIC_EncodePriority+0x30>
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3b03      	subs	r3, #3
 8000dc6:	e000      	b.n	8000dca <NVIC_EncodePriority+0x32>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dea:	43d9      	mvns	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	4313      	orrs	r3, r2
         );
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3724      	adds	r7, #36	; 0x24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff90 	bl	8000d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff2d 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff42 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff90 	bl	8000d98 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5f 	bl	8000d44 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff35 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffa2 	bl	8000dfc <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b08b      	sub	sp, #44	; 0x2c
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e169      	b.n	80011ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f040 8158 	bne.w	80011a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a9a      	ldr	r2, [pc, #616]	; (8001164 <HAL_GPIO_Init+0x2a0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d05e      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
 8000f00:	4a98      	ldr	r2, [pc, #608]	; (8001164 <HAL_GPIO_Init+0x2a0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d875      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f06:	4a98      	ldr	r2, [pc, #608]	; (8001168 <HAL_GPIO_Init+0x2a4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d058      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
 8000f0c:	4a96      	ldr	r2, [pc, #600]	; (8001168 <HAL_GPIO_Init+0x2a4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d86f      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f12:	4a96      	ldr	r2, [pc, #600]	; (800116c <HAL_GPIO_Init+0x2a8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d052      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
 8000f18:	4a94      	ldr	r2, [pc, #592]	; (800116c <HAL_GPIO_Init+0x2a8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d869      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f1e:	4a94      	ldr	r2, [pc, #592]	; (8001170 <HAL_GPIO_Init+0x2ac>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d04c      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
 8000f24:	4a92      	ldr	r2, [pc, #584]	; (8001170 <HAL_GPIO_Init+0x2ac>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d863      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f2a:	4a92      	ldr	r2, [pc, #584]	; (8001174 <HAL_GPIO_Init+0x2b0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d046      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
 8000f30:	4a90      	ldr	r2, [pc, #576]	; (8001174 <HAL_GPIO_Init+0x2b0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d85d      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d82a      	bhi.n	8000f90 <HAL_GPIO_Init+0xcc>
 8000f3a:	2b12      	cmp	r3, #18
 8000f3c:	d859      	bhi.n	8000ff2 <HAL_GPIO_Init+0x12e>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <HAL_GPIO_Init+0x80>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000fab 	.word	0x08000fab
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000ff3 	.word	0x08000ff3
 8000f58:	08000ff3 	.word	0x08000ff3
 8000f5c:	08000ff3 	.word	0x08000ff3
 8000f60:	08000ff3 	.word	0x08000ff3
 8000f64:	08000ff3 	.word	0x08000ff3
 8000f68:	08000ff3 	.word	0x08000ff3
 8000f6c:	08000ff3 	.word	0x08000ff3
 8000f70:	08000ff3 	.word	0x08000ff3
 8000f74:	08000ff3 	.word	0x08000ff3
 8000f78:	08000ff3 	.word	0x08000ff3
 8000f7c:	08000ff3 	.word	0x08000ff3
 8000f80:	08000ff3 	.word	0x08000ff3
 8000f84:	08000ff3 	.word	0x08000ff3
 8000f88:	08000fa1 	.word	0x08000fa1
 8000f8c:	08000fb5 	.word	0x08000fb5
 8000f90:	4a79      	ldr	r2, [pc, #484]	; (8001178 <HAL_GPIO_Init+0x2b4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f96:	e02c      	b.n	8000ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	623b      	str	r3, [r7, #32]
          break;
 8000f9e:	e029      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	623b      	str	r3, [r7, #32]
          break;
 8000fa8:	e024      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	3308      	adds	r3, #8
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e01f      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e01a      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e013      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d105      	bne.n	8000fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	611a      	str	r2, [r3, #16]
          break;
 8000fde:	e009      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	615a      	str	r2, [r3, #20]
          break;
 8000fea:	e003      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
          break;
 8000ff0:	e000      	b.n	8000ff4 <HAL_GPIO_Init+0x130>
          break;
 8000ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	d801      	bhi.n	8000ffe <HAL_GPIO_Init+0x13a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	e001      	b.n	8001002 <HAL_GPIO_Init+0x13e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d802      	bhi.n	8001010 <HAL_GPIO_Init+0x14c>
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	e002      	b.n	8001016 <HAL_GPIO_Init+0x152>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	3b08      	subs	r3, #8
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	210f      	movs	r1, #15
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	fa01 f303 	lsl.w	r3, r1, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	6a39      	ldr	r1, [r7, #32]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	431a      	orrs	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 80b1 	beq.w	80011a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_GPIO_Init+0x2b8>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a4c      	ldr	r2, [pc, #304]	; (800117c <HAL_GPIO_Init+0x2b8>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <HAL_GPIO_Init+0x2b8>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800105c:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_GPIO_Init+0x2bc>)
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a40      	ldr	r2, [pc, #256]	; (8001184 <HAL_GPIO_Init+0x2c0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d013      	beq.n	80010b0 <HAL_GPIO_Init+0x1ec>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <HAL_GPIO_Init+0x2c4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d00d      	beq.n	80010ac <HAL_GPIO_Init+0x1e8>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a3e      	ldr	r2, [pc, #248]	; (800118c <HAL_GPIO_Init+0x2c8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d007      	beq.n	80010a8 <HAL_GPIO_Init+0x1e4>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3d      	ldr	r2, [pc, #244]	; (8001190 <HAL_GPIO_Init+0x2cc>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d101      	bne.n	80010a4 <HAL_GPIO_Init+0x1e0>
 80010a0:	2303      	movs	r3, #3
 80010a2:	e006      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1ee>
 80010b0:	2300      	movs	r3, #0
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010c2:	492f      	ldr	r1, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x2bc>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	492c      	ldr	r1, [pc, #176]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4928      	ldr	r1, [pc, #160]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4922      	ldr	r1, [pc, #136]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	491e      	ldr	r1, [pc, #120]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 800111c:	4013      	ands	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	4918      	ldr	r1, [pc, #96]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	4914      	ldr	r1, [pc, #80]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 8001144:	4013      	ands	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d021      	beq.n	8001198 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	490e      	ldr	r1, [pc, #56]	; (8001194 <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
 8001160:	e021      	b.n	80011a6 <HAL_GPIO_Init+0x2e2>
 8001162:	bf00      	nop
 8001164:	10320000 	.word	0x10320000
 8001168:	10310000 	.word	0x10310000
 800116c:	10220000 	.word	0x10220000
 8001170:	10210000 	.word	0x10210000
 8001174:	10120000 	.word	0x10120000
 8001178:	10110000 	.word	0x10110000
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40011000 	.word	0x40011000
 8001190:	40011400 	.word	0x40011400
 8001194:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_GPIO_Init+0x304>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	43db      	mvns	r3, r3
 80011a0:	4909      	ldr	r1, [pc, #36]	; (80011c8 <HAL_GPIO_Init+0x304>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	3301      	adds	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f ae8e 	bne.w	8000ed8 <HAL_GPIO_Init+0x14>
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	372c      	adds	r7, #44	; 0x2c
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40010400 	.word	0x40010400

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e8:	e003      	b.n	80011f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	611a      	str	r2, [r3, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f806 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e272      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8087 	beq.w	800136e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001260:	4b92      	ldr	r3, [pc, #584]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b04      	cmp	r3, #4
 800126a:	d00c      	beq.n	8001286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b08      	cmp	r3, #8
 8001276:	d112      	bne.n	800129e <HAL_RCC_OscConfig+0x5e>
 8001278:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d10b      	bne.n	800129e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d06c      	beq.n	800136c <HAL_RCC_OscConfig+0x12c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d168      	bne.n	800136c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e24c      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x76>
 80012a8:	4b80      	ldr	r3, [pc, #512]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a7f      	ldr	r2, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e02e      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a7a      	ldr	r2, [pc, #488]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b78      	ldr	r3, [pc, #480]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a77      	ldr	r2, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e01d      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0xbc>
 80012e2:	4b72      	ldr	r3, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a71      	ldr	r2, [pc, #452]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012fc:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a6a      	ldr	r2, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a67      	ldr	r2, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fcba 	bl	8000c94 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fcb6 	bl	8000c94 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e200      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0xe4>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fca6 	bl	8000c94 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fca2 	bl	8000c94 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1ec      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x10c>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x18c>
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1c0      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4939      	ldr	r1, [pc, #228]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e03a      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fc5b 	bl	8000c94 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc57 	bl	8000c94 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a1      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4927      	ldr	r1, [pc, #156]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc3a 	bl	8000c94 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fc36 	bl	8000c94 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e180      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03a      	beq.n	80014c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d019      	beq.n	800148a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fc1a 	bl	8000c94 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fc16 	bl	8000c94 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e160      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 fad8 	bl	8001a38 <RCC_Delay>
 8001488:	e01c      	b.n	80014c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fc00 	bl	8000c94 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001496:	e00f      	b.n	80014b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fbfc 	bl	8000c94 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d908      	bls.n	80014b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e146      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	42420000 	.word	0x42420000
 80014b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e9      	bne.n	8001498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a6 	beq.w	800161e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a87      	ldr	r2, [pc, #540]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fbbd 	bl	8000c94 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fbb9 	bl	8000c94 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e103      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x312>
 8001544:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e02d      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x334>
 800155a:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a69      	ldr	r2, [pc, #420]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	e01c      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x356>
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a60      	ldr	r2, [pc, #384]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e00b      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d015      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb6d 	bl	8000c94 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb69 	bl	8000c94 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0b1      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ee      	beq.n	80015be <HAL_RCC_OscConfig+0x37e>
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb57 	bl	8000c94 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb53 	bl	8000c94 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e09b      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ee      	bne.n	80015ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d105      	bne.n	800161e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a3b      	ldr	r2, [pc, #236]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8087 	beq.w	8001736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d061      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d146      	bne.n	80016ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb27 	bl	8000c94 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb23 	bl	8000c94 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e06d      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d108      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4921      	ldr	r1, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a19      	ldr	r1, [r3, #32]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	430b      	orrs	r3, r1
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff faf7 	bl	8000c94 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff faf3 	bl	8000c94 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03d      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x46a>
 80016c8:	e035      	b.n	8001736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fae0 	bl	8000c94 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fadc 	bl	8000c94 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e026      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x498>
 80016f6:	e01e      	b.n	8001736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e019      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x500>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	429a      	cmp	r2, r3
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d0      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d910      	bls.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4965      	ldr	r1, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d040      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d115      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e073      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa2e 	bl	8000c94 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa2a 	bl	8000c94 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e053      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d210      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4922      	ldr	r1, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1cc>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f98c 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	0800356c 	.word	0x0800356c
 8001910:	20000018 	.word	0x20000018
 8001914:	2000001c 	.word	0x2000001c

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b490      	push	{r4, r7}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001920:	1d3c      	adds	r4, r7, #4
 8001922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001928:	f240 2301 	movw	r3, #513	; 0x201
 800192c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d002      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x40>
 8001952:	2b08      	cmp	r3, #8
 8001954:	d003      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x46>
 8001956:	e02b      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800195a:	623b      	str	r3, [r7, #32]
      break;
 800195c:	e02b      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	0c9b      	lsrs	r3, r3, #18
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3328      	adds	r3, #40	; 0x28
 8001968:	443b      	add	r3, r7
 800196a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800196e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d012      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0c5b      	lsrs	r3, r3, #17
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	3328      	adds	r3, #40	; 0x28
 8001986:	443b      	add	r3, r7
 8001988:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800198c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001992:	fb03 f202 	mul.w	r2, r3, r2
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	fbb2 f3f3 	udiv	r3, r2, r3
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
 800199e:	e004      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	623b      	str	r3, [r7, #32]
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80019b2:	623b      	str	r3, [r7, #32]
      break;
 80019b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b6:	6a3b      	ldr	r3, [r7, #32]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3728      	adds	r7, #40	; 0x28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc90      	pop	{r4, r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	0800355c 	.word	0x0800355c
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	003d0900 	.word	0x003d0900

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000018 	.word	0x20000018

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ec:	f7ff fff2 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	0800357c 	.word	0x0800357c

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4903      	ldr	r1, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	0800357c 	.word	0x0800357c

08001a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <RCC_Delay+0x34>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <RCC_Delay+0x38>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0a5b      	lsrs	r3, r3, #9
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a54:	bf00      	nop
  }
  while (Delay --);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	60fa      	str	r2, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f9      	bne.n	8001a54 <RCC_Delay+0x1c>
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000018 	.word	0x20000018
 8001a70:	10624dd3 	.word	0x10624dd3

08001a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e041      	b.n	8001b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe ff80 	bl	80009a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	f000 fbda 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e041      	b.n	8001ba8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d106      	bne.n	8001b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f839 	bl	8001bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f000 fb8b 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_TIM_PWM_Start+0x24>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e022      	b.n	8001c2e <HAL_TIM_PWM_Start+0x6a>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d109      	bne.n	8001c02 <HAL_TIM_PWM_Start+0x3e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e015      	b.n	8001c2e <HAL_TIM_PWM_Start+0x6a>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d109      	bne.n	8001c1c <HAL_TIM_PWM_Start+0x58>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e008      	b.n	8001c2e <HAL_TIM_PWM_Start+0x6a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e05e      	b.n	8001cf4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <HAL_TIM_PWM_Start+0x82>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c44:	e013      	b.n	8001c6e <HAL_TIM_PWM_Start+0xaa>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d104      	bne.n	8001c56 <HAL_TIM_PWM_Start+0x92>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c54:	e00b      	b.n	8001c6e <HAL_TIM_PWM_Start+0xaa>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_PWM_Start+0xa2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c64:	e003      	b.n	8001c6e <HAL_TIM_PWM_Start+0xaa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fd78 	bl	800276c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1e      	ldr	r2, [pc, #120]	; (8001cfc <HAL_TIM_PWM_Start+0x138>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d107      	bne.n	8001c96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_TIM_PWM_Start+0x138>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00e      	beq.n	8001cbe <HAL_TIM_PWM_Start+0xfa>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca8:	d009      	beq.n	8001cbe <HAL_TIM_PWM_Start+0xfa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_TIM_PWM_Start+0x13c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_TIM_PWM_Start+0xfa>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_TIM_PWM_Start+0x140>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d111      	bne.n	8001ce2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	d010      	beq.n	8001cf2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce0:	e007      	b.n	8001cf2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 0201 	orr.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800

08001d08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e093      	b.n	8001e44 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fd9f 	bl	8000874 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d4c:	f023 0307 	bic.w	r3, r3, #7
 8001d50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f000 fa85 	bl	800226c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001da8:	f023 030c 	bic.w	r3, r3, #12
 8001dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	011a      	lsls	r2, r3, #4
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	031b      	lsls	r3, r3, #12
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001de6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4313      	orrs	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d110      	bne.n	8001e9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d001      	beq.n	8001e8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e069      	b.n	8001f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	e031      	b.n	8001f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d110      	bne.n	8001ec6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001eaa:	7b3b      	ldrb	r3, [r7, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d001      	beq.n	8001eb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e055      	b.n	8001f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	e01d      	b.n	8001f02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ed2:	7b7b      	ldrb	r3, [r7, #13]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ed8:	7b3b      	ldrb	r3, [r7, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d001      	beq.n	8001ee2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03e      	b.n	8001f60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_TIM_Encoder_Start+0xc4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d008      	beq.n	8001f20 <HAL_TIM_Encoder_Start+0xd4>
 8001f0e:	e00f      	b.n	8001f30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fc27 	bl	800276c <TIM_CCxChannelCmd>
      break;
 8001f1e:	e016      	b.n	8001f4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2104      	movs	r1, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fc1f 	bl	800276c <TIM_CCxChannelCmd>
      break;
 8001f2e:	e00e      	b.n	8001f4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fc17 	bl	800276c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2201      	movs	r2, #1
 8001f44:	2104      	movs	r1, #4
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc10 	bl	800276c <TIM_CCxChannelCmd>
      break;
 8001f4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e0ac      	b.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	f200 809f 	bhi.w	80020d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001f92:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	080020d1 	.word	0x080020d1
 8001fa0:	080020d1 	.word	0x080020d1
 8001fa4:	080020d1 	.word	0x080020d1
 8001fa8:	0800200d 	.word	0x0800200d
 8001fac:	080020d1 	.word	0x080020d1
 8001fb0:	080020d1 	.word	0x080020d1
 8001fb4:	080020d1 	.word	0x080020d1
 8001fb8:	0800204f 	.word	0x0800204f
 8001fbc:	080020d1 	.word	0x080020d1
 8001fc0:	080020d1 	.word	0x080020d1
 8001fc4:	080020d1 	.word	0x080020d1
 8001fc8:	0800208f 	.word	0x0800208f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f9ac 	bl	8002330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699a      	ldr	r2, [r3, #24]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6999      	ldr	r1, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	619a      	str	r2, [r3, #24]
      break;
 800200a:	e062      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f9f2 	bl	80023fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6999      	ldr	r1, [r3, #24]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	021a      	lsls	r2, r3, #8
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	619a      	str	r2, [r3, #24]
      break;
 800204c:	e041      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68b9      	ldr	r1, [r7, #8]
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fa3b 	bl	80024d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0208 	orr.w	r2, r2, #8
 8002068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0204 	bic.w	r2, r2, #4
 8002078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69d9      	ldr	r1, [r3, #28]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	61da      	str	r2, [r3, #28]
      break;
 800208c:	e021      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fa85 	bl	80025a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	69da      	ldr	r2, [r3, #28]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69d9      	ldr	r1, [r3, #28]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	021a      	lsls	r2, r3, #8
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	61da      	str	r2, [r3, #28]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80020d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_TIM_ConfigClockSource+0x18>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0b3      	b.n	8002264 <HAL_TIM_ConfigClockSource+0x180>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800211a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002122:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002134:	d03e      	beq.n	80021b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	f200 8087 	bhi.w	800224c <HAL_TIM_ConfigClockSource+0x168>
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	f000 8085 	beq.w	8002250 <HAL_TIM_ConfigClockSource+0x16c>
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214a:	d87f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800214c:	2b70      	cmp	r3, #112	; 0x70
 800214e:	d01a      	beq.n	8002186 <HAL_TIM_ConfigClockSource+0xa2>
 8002150:	2b70      	cmp	r3, #112	; 0x70
 8002152:	d87b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002154:	2b60      	cmp	r3, #96	; 0x60
 8002156:	d050      	beq.n	80021fa <HAL_TIM_ConfigClockSource+0x116>
 8002158:	2b60      	cmp	r3, #96	; 0x60
 800215a:	d877      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800215c:	2b50      	cmp	r3, #80	; 0x50
 800215e:	d03c      	beq.n	80021da <HAL_TIM_ConfigClockSource+0xf6>
 8002160:	2b50      	cmp	r3, #80	; 0x50
 8002162:	d873      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d058      	beq.n	800221a <HAL_TIM_ConfigClockSource+0x136>
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d86f      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800216c:	2b30      	cmp	r3, #48	; 0x30
 800216e:	d064      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002170:	2b30      	cmp	r3, #48	; 0x30
 8002172:	d86b      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 8002174:	2b20      	cmp	r3, #32
 8002176:	d060      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002178:	2b20      	cmp	r3, #32
 800217a:	d867      	bhi.n	800224c <HAL_TIM_ConfigClockSource+0x168>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d05c      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d05a      	beq.n	800223a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002184:	e062      	b.n	800224c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f000 faca 	bl	800272e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	609a      	str	r2, [r3, #8]
      break;
 80021b2:	e04e      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f000 fab3 	bl	800272e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021d6:	609a      	str	r2, [r3, #8]
      break;
 80021d8:	e03b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f000 fa2a 	bl	8002640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2150      	movs	r1, #80	; 0x50
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fa81 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 80021f8:	e02b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	461a      	mov	r2, r3
 8002208:	f000 fa48 	bl	800269c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2160      	movs	r1, #96	; 0x60
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fa71 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 8002218:	e01b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6859      	ldr	r1, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 fa0a 	bl	8002640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2140      	movs	r1, #64	; 0x40
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fa61 	bl	80026fa <TIM_ITRx_SetConfig>
      break;
 8002238:	e00b      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f000 fa58 	bl	80026fa <TIM_ITRx_SetConfig>
        break;
 800224a:	e002      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a29      	ldr	r2, [pc, #164]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0xc0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <TIM_Base_SetConfig+0xbc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <TIM_Base_SetConfig+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <TIM_Base_SetConfig+0xb8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40000400 	.word	0x40000400
 800232c:	40000800 	.word	0x40000800

08002330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f023 0201 	bic.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 0302 	bic.w	r3, r3, #2
 8002378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <TIM_OC1_SetConfig+0xc8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10c      	bne.n	80023a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0308 	bic.w	r3, r3, #8
 8002392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <TIM_OC1_SetConfig+0xc8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	621a      	str	r2, [r3, #32]
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00

080023fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f023 0210 	bic.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f023 0320 	bic.w	r3, r3, #32
 8002446:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <TIM_OC2_SetConfig+0xd0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d10d      	bne.n	8002478 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002476:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a14      	ldr	r2, [pc, #80]	; (80024cc <TIM_OC2_SetConfig+0xd0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d113      	bne.n	80024a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800248e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	621a      	str	r2, [r3, #32]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00

080024d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <TIM_OC3_SetConfig+0xd0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10d      	bne.n	800254a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <TIM_OC3_SetConfig+0xd0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d113      	bne.n	800257a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	621a      	str	r2, [r3, #32]
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40012c00 	.word	0x40012c00

080025a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	031b      	lsls	r3, r3, #12
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <TIM_OC4_SetConfig+0x98>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d109      	bne.n	8002618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800260a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00

08002640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0201 	bic.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 030a 	bic.w	r3, r3, #10
 800267c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 0210 	bic.w	r2, r3, #16
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	031b      	lsls	r3, r3, #12
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	621a      	str	r2, [r3, #32]
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	f043 0307 	orr.w	r3, r3, #7
 800271c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002748:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	431a      	orrs	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4313      	orrs	r3, r2
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	609a      	str	r2, [r3, #8]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2201      	movs	r2, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e046      	b.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002818:	d009      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d10c      	bne.n	8002848 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4313      	orrs	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800

08002870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e03f      	b.n	8002902 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe f8d4 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f905 	bl	8002ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b08a      	sub	sp, #40	; 0x28
 800290e:	af02      	add	r7, sp, #8
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b20      	cmp	r3, #32
 8002928:	d17c      	bne.n	8002a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_UART_Transmit+0x2c>
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e075      	b.n	8002a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_UART_Transmit+0x3e>
 8002944:	2302      	movs	r3, #2
 8002946:	e06e      	b.n	8002a26 <HAL_UART_Transmit+0x11c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2221      	movs	r2, #33	; 0x21
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295e:	f7fe f999 	bl	8000c94 <HAL_GetTick>
 8002962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	88fa      	ldrh	r2, [r7, #6]
 8002968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002978:	d108      	bne.n	800298c <HAL_UART_Transmit+0x82>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d104      	bne.n	800298c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	e003      	b.n	8002994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800299c:	e02a      	b.n	80029f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f840 	bl	8002a2e <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e036      	b.n	8002a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3302      	adds	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	e007      	b.n	80029e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	3301      	adds	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1cf      	bne.n	800299e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f810 	bl	8002a2e <UART_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e006      	b.n	8002a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a24:	2302      	movs	r3, #2
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3e:	e02c      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d028      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a4e:	f7fe f921 	bl	8000c94 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d21d      	bcs.n	8002a9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a6c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2220      	movs	r2, #32
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00f      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d0c3      	beq.n	8002a40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002afe:	f023 030c 	bic.w	r3, r3, #12
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <UART_SetConfig+0x114>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d103      	bne.n	8002b34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b2c:	f7fe ff70 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	e002      	b.n	8002b3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b34:	f7fe ff58 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002b38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	009a      	lsls	r2, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	4a22      	ldr	r2, [pc, #136]	; (8002bdc <UART_SetConfig+0x118>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	0119      	lsls	r1, r3, #4
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009a      	lsls	r2, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <UART_SetConfig+0x118>)
 8002b72:	fba3 0302 	umull	r0, r3, r3, r2
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2064      	movs	r0, #100	; 0x64
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	3332      	adds	r3, #50	; 0x32
 8002b84:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <UART_SetConfig+0x118>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b90:	4419      	add	r1, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	009a      	lsls	r2, r3, #2
 8002b9c:	441a      	add	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <UART_SetConfig+0x118>)
 8002baa:	fba3 0302 	umull	r0, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	2064      	movs	r0, #100	; 0x64
 8002bb2:	fb00 f303 	mul.w	r3, r0, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	3332      	adds	r3, #50	; 0x32
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <UART_SetConfig+0x118>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	440a      	add	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bd0:	bf00      	nop
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	51eb851f 	.word	0x51eb851f

08002be0 <__errno>:
 8002be0:	4b01      	ldr	r3, [pc, #4]	; (8002be8 <__errno+0x8>)
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000024 	.word	0x20000024

08002bec <__libc_init_array>:
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	2600      	movs	r6, #0
 8002bf0:	4d0c      	ldr	r5, [pc, #48]	; (8002c24 <__libc_init_array+0x38>)
 8002bf2:	4c0d      	ldr	r4, [pc, #52]	; (8002c28 <__libc_init_array+0x3c>)
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	42a6      	cmp	r6, r4
 8002bfa:	d109      	bne.n	8002c10 <__libc_init_array+0x24>
 8002bfc:	f000 fc9c 	bl	8003538 <_init>
 8002c00:	2600      	movs	r6, #0
 8002c02:	4d0a      	ldr	r5, [pc, #40]	; (8002c2c <__libc_init_array+0x40>)
 8002c04:	4c0a      	ldr	r4, [pc, #40]	; (8002c30 <__libc_init_array+0x44>)
 8002c06:	1b64      	subs	r4, r4, r5
 8002c08:	10a4      	asrs	r4, r4, #2
 8002c0a:	42a6      	cmp	r6, r4
 8002c0c:	d105      	bne.n	8002c1a <__libc_init_array+0x2e>
 8002c0e:	bd70      	pop	{r4, r5, r6, pc}
 8002c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c14:	4798      	blx	r3
 8002c16:	3601      	adds	r6, #1
 8002c18:	e7ee      	b.n	8002bf8 <__libc_init_array+0xc>
 8002c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1e:	4798      	blx	r3
 8002c20:	3601      	adds	r6, #1
 8002c22:	e7f2      	b.n	8002c0a <__libc_init_array+0x1e>
 8002c24:	080035b8 	.word	0x080035b8
 8002c28:	080035b8 	.word	0x080035b8
 8002c2c:	080035b8 	.word	0x080035b8
 8002c30:	080035bc 	.word	0x080035bc

08002c34 <memset>:
 8002c34:	4603      	mov	r3, r0
 8002c36:	4402      	add	r2, r0
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d100      	bne.n	8002c3e <memset+0xa>
 8002c3c:	4770      	bx	lr
 8002c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c42:	e7f9      	b.n	8002c38 <memset+0x4>

08002c44 <siprintf>:
 8002c44:	b40e      	push	{r1, r2, r3}
 8002c46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c4a:	b500      	push	{lr}
 8002c4c:	b09c      	sub	sp, #112	; 0x70
 8002c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c50:	9002      	str	r0, [sp, #8]
 8002c52:	9006      	str	r0, [sp, #24]
 8002c54:	9107      	str	r1, [sp, #28]
 8002c56:	9104      	str	r1, [sp, #16]
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <siprintf+0x38>)
 8002c5a:	4909      	ldr	r1, [pc, #36]	; (8002c80 <siprintf+0x3c>)
 8002c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c60:	9105      	str	r1, [sp, #20]
 8002c62:	6800      	ldr	r0, [r0, #0]
 8002c64:	a902      	add	r1, sp, #8
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	f000 f868 	bl	8002d3c <_svfiprintf_r>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	b01c      	add	sp, #112	; 0x70
 8002c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c78:	b003      	add	sp, #12
 8002c7a:	4770      	bx	lr
 8002c7c:	20000024 	.word	0x20000024
 8002c80:	ffff0208 	.word	0xffff0208

08002c84 <__ssputs_r>:
 8002c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	688e      	ldr	r6, [r1, #8]
 8002c8a:	4682      	mov	sl, r0
 8002c8c:	429e      	cmp	r6, r3
 8002c8e:	460c      	mov	r4, r1
 8002c90:	4690      	mov	r8, r2
 8002c92:	461f      	mov	r7, r3
 8002c94:	d838      	bhi.n	8002d08 <__ssputs_r+0x84>
 8002c96:	898a      	ldrh	r2, [r1, #12]
 8002c98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c9c:	d032      	beq.n	8002d04 <__ssputs_r+0x80>
 8002c9e:	6825      	ldr	r5, [r4, #0]
 8002ca0:	6909      	ldr	r1, [r1, #16]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	eba5 0901 	sub.w	r9, r5, r1
 8002ca8:	6965      	ldr	r5, [r4, #20]
 8002caa:	444b      	add	r3, r9
 8002cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cb4:	106d      	asrs	r5, r5, #1
 8002cb6:	429d      	cmp	r5, r3
 8002cb8:	bf38      	it	cc
 8002cba:	461d      	movcc	r5, r3
 8002cbc:	0553      	lsls	r3, r2, #21
 8002cbe:	d531      	bpl.n	8002d24 <__ssputs_r+0xa0>
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f000 fb6f 	bl	80033a4 <_malloc_r>
 8002cc6:	4606      	mov	r6, r0
 8002cc8:	b950      	cbnz	r0, 8002ce0 <__ssputs_r+0x5c>
 8002cca:	230c      	movs	r3, #12
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f8ca 3000 	str.w	r3, [sl]
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cda:	81a3      	strh	r3, [r4, #12]
 8002cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ce0:	464a      	mov	r2, r9
 8002ce2:	6921      	ldr	r1, [r4, #16]
 8002ce4:	f000 face 	bl	8003284 <memcpy>
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	6126      	str	r6, [r4, #16]
 8002cf6:	444e      	add	r6, r9
 8002cf8:	6026      	str	r6, [r4, #0]
 8002cfa:	463e      	mov	r6, r7
 8002cfc:	6165      	str	r5, [r4, #20]
 8002cfe:	eba5 0509 	sub.w	r5, r5, r9
 8002d02:	60a5      	str	r5, [r4, #8]
 8002d04:	42be      	cmp	r6, r7
 8002d06:	d900      	bls.n	8002d0a <__ssputs_r+0x86>
 8002d08:	463e      	mov	r6, r7
 8002d0a:	4632      	mov	r2, r6
 8002d0c:	4641      	mov	r1, r8
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	f000 fac6 	bl	80032a0 <memmove>
 8002d14:	68a3      	ldr	r3, [r4, #8]
 8002d16:	2000      	movs	r0, #0
 8002d18:	1b9b      	subs	r3, r3, r6
 8002d1a:	60a3      	str	r3, [r4, #8]
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	4433      	add	r3, r6
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	e7db      	b.n	8002cdc <__ssputs_r+0x58>
 8002d24:	462a      	mov	r2, r5
 8002d26:	f000 fbb1 	bl	800348c <_realloc_r>
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d1e1      	bne.n	8002cf4 <__ssputs_r+0x70>
 8002d30:	4650      	mov	r0, sl
 8002d32:	6921      	ldr	r1, [r4, #16]
 8002d34:	f000 face 	bl	80032d4 <_free_r>
 8002d38:	e7c7      	b.n	8002cca <__ssputs_r+0x46>
	...

08002d3c <_svfiprintf_r>:
 8002d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d40:	4698      	mov	r8, r3
 8002d42:	898b      	ldrh	r3, [r1, #12]
 8002d44:	4607      	mov	r7, r0
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	460d      	mov	r5, r1
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	b09d      	sub	sp, #116	; 0x74
 8002d4e:	d50e      	bpl.n	8002d6e <_svfiprintf_r+0x32>
 8002d50:	690b      	ldr	r3, [r1, #16]
 8002d52:	b963      	cbnz	r3, 8002d6e <_svfiprintf_r+0x32>
 8002d54:	2140      	movs	r1, #64	; 0x40
 8002d56:	f000 fb25 	bl	80033a4 <_malloc_r>
 8002d5a:	6028      	str	r0, [r5, #0]
 8002d5c:	6128      	str	r0, [r5, #16]
 8002d5e:	b920      	cbnz	r0, 8002d6a <_svfiprintf_r+0x2e>
 8002d60:	230c      	movs	r3, #12
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	e0d1      	b.n	8002f0e <_svfiprintf_r+0x1d2>
 8002d6a:	2340      	movs	r3, #64	; 0x40
 8002d6c:	616b      	str	r3, [r5, #20]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9309      	str	r3, [sp, #36]	; 0x24
 8002d72:	2320      	movs	r3, #32
 8002d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d78:	2330      	movs	r3, #48	; 0x30
 8002d7a:	f04f 0901 	mov.w	r9, #1
 8002d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f28 <_svfiprintf_r+0x1ec>
 8002d86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	469a      	mov	sl, r3
 8002d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d92:	b10a      	cbz	r2, 8002d98 <_svfiprintf_r+0x5c>
 8002d94:	2a25      	cmp	r2, #37	; 0x25
 8002d96:	d1f9      	bne.n	8002d8c <_svfiprintf_r+0x50>
 8002d98:	ebba 0b04 	subs.w	fp, sl, r4
 8002d9c:	d00b      	beq.n	8002db6 <_svfiprintf_r+0x7a>
 8002d9e:	465b      	mov	r3, fp
 8002da0:	4622      	mov	r2, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	4638      	mov	r0, r7
 8002da6:	f7ff ff6d 	bl	8002c84 <__ssputs_r>
 8002daa:	3001      	adds	r0, #1
 8002dac:	f000 80aa 	beq.w	8002f04 <_svfiprintf_r+0x1c8>
 8002db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002db2:	445a      	add	r2, fp
 8002db4:	9209      	str	r2, [sp, #36]	; 0x24
 8002db6:	f89a 3000 	ldrb.w	r3, [sl]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80a2 	beq.w	8002f04 <_svfiprintf_r+0x1c8>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dca:	f10a 0a01 	add.w	sl, sl, #1
 8002dce:	9304      	str	r3, [sp, #16]
 8002dd0:	9307      	str	r3, [sp, #28]
 8002dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8002dd8:	4654      	mov	r4, sl
 8002dda:	2205      	movs	r2, #5
 8002ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de0:	4851      	ldr	r0, [pc, #324]	; (8002f28 <_svfiprintf_r+0x1ec>)
 8002de2:	f000 fa41 	bl	8003268 <memchr>
 8002de6:	9a04      	ldr	r2, [sp, #16]
 8002de8:	b9d8      	cbnz	r0, 8002e22 <_svfiprintf_r+0xe6>
 8002dea:	06d0      	lsls	r0, r2, #27
 8002dec:	bf44      	itt	mi
 8002dee:	2320      	movmi	r3, #32
 8002df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002df4:	0711      	lsls	r1, r2, #28
 8002df6:	bf44      	itt	mi
 8002df8:	232b      	movmi	r3, #43	; 0x2b
 8002dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002e02:	2b2a      	cmp	r3, #42	; 0x2a
 8002e04:	d015      	beq.n	8002e32 <_svfiprintf_r+0xf6>
 8002e06:	4654      	mov	r4, sl
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f04f 0c0a 	mov.w	ip, #10
 8002e0e:	9a07      	ldr	r2, [sp, #28]
 8002e10:	4621      	mov	r1, r4
 8002e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e16:	3b30      	subs	r3, #48	; 0x30
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	d94e      	bls.n	8002eba <_svfiprintf_r+0x17e>
 8002e1c:	b1b0      	cbz	r0, 8002e4c <_svfiprintf_r+0x110>
 8002e1e:	9207      	str	r2, [sp, #28]
 8002e20:	e014      	b.n	8002e4c <_svfiprintf_r+0x110>
 8002e22:	eba0 0308 	sub.w	r3, r0, r8
 8002e26:	fa09 f303 	lsl.w	r3, r9, r3
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	46a2      	mov	sl, r4
 8002e2e:	9304      	str	r3, [sp, #16]
 8002e30:	e7d2      	b.n	8002dd8 <_svfiprintf_r+0x9c>
 8002e32:	9b03      	ldr	r3, [sp, #12]
 8002e34:	1d19      	adds	r1, r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	9103      	str	r1, [sp, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bfbb      	ittet	lt
 8002e3e:	425b      	neglt	r3, r3
 8002e40:	f042 0202 	orrlt.w	r2, r2, #2
 8002e44:	9307      	strge	r3, [sp, #28]
 8002e46:	9307      	strlt	r3, [sp, #28]
 8002e48:	bfb8      	it	lt
 8002e4a:	9204      	strlt	r2, [sp, #16]
 8002e4c:	7823      	ldrb	r3, [r4, #0]
 8002e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e50:	d10c      	bne.n	8002e6c <_svfiprintf_r+0x130>
 8002e52:	7863      	ldrb	r3, [r4, #1]
 8002e54:	2b2a      	cmp	r3, #42	; 0x2a
 8002e56:	d135      	bne.n	8002ec4 <_svfiprintf_r+0x188>
 8002e58:	9b03      	ldr	r3, [sp, #12]
 8002e5a:	3402      	adds	r4, #2
 8002e5c:	1d1a      	adds	r2, r3, #4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	9203      	str	r2, [sp, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bfb8      	it	lt
 8002e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e6a:	9305      	str	r3, [sp, #20]
 8002e6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f2c <_svfiprintf_r+0x1f0>
 8002e70:	2203      	movs	r2, #3
 8002e72:	4650      	mov	r0, sl
 8002e74:	7821      	ldrb	r1, [r4, #0]
 8002e76:	f000 f9f7 	bl	8003268 <memchr>
 8002e7a:	b140      	cbz	r0, 8002e8e <_svfiprintf_r+0x152>
 8002e7c:	2340      	movs	r3, #64	; 0x40
 8002e7e:	eba0 000a 	sub.w	r0, r0, sl
 8002e82:	fa03 f000 	lsl.w	r0, r3, r0
 8002e86:	9b04      	ldr	r3, [sp, #16]
 8002e88:	3401      	adds	r4, #1
 8002e8a:	4303      	orrs	r3, r0
 8002e8c:	9304      	str	r3, [sp, #16]
 8002e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e92:	2206      	movs	r2, #6
 8002e94:	4826      	ldr	r0, [pc, #152]	; (8002f30 <_svfiprintf_r+0x1f4>)
 8002e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e9a:	f000 f9e5 	bl	8003268 <memchr>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d038      	beq.n	8002f14 <_svfiprintf_r+0x1d8>
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <_svfiprintf_r+0x1f8>)
 8002ea4:	bb1b      	cbnz	r3, 8002eee <_svfiprintf_r+0x1b2>
 8002ea6:	9b03      	ldr	r3, [sp, #12]
 8002ea8:	3307      	adds	r3, #7
 8002eaa:	f023 0307 	bic.w	r3, r3, #7
 8002eae:	3308      	adds	r3, #8
 8002eb0:	9303      	str	r3, [sp, #12]
 8002eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002eb4:	4433      	add	r3, r6
 8002eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002eb8:	e767      	b.n	8002d8a <_svfiprintf_r+0x4e>
 8002eba:	460c      	mov	r4, r1
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ec2:	e7a5      	b.n	8002e10 <_svfiprintf_r+0xd4>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f04f 0c0a 	mov.w	ip, #10
 8002eca:	4619      	mov	r1, r3
 8002ecc:	3401      	adds	r4, #1
 8002ece:	9305      	str	r3, [sp, #20]
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ed6:	3a30      	subs	r2, #48	; 0x30
 8002ed8:	2a09      	cmp	r2, #9
 8002eda:	d903      	bls.n	8002ee4 <_svfiprintf_r+0x1a8>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0c5      	beq.n	8002e6c <_svfiprintf_r+0x130>
 8002ee0:	9105      	str	r1, [sp, #20]
 8002ee2:	e7c3      	b.n	8002e6c <_svfiprintf_r+0x130>
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eec:	e7f0      	b.n	8002ed0 <_svfiprintf_r+0x194>
 8002eee:	ab03      	add	r3, sp, #12
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	462a      	mov	r2, r5
 8002ef4:	4638      	mov	r0, r7
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_svfiprintf_r+0x1fc>)
 8002ef8:	a904      	add	r1, sp, #16
 8002efa:	f3af 8000 	nop.w
 8002efe:	1c42      	adds	r2, r0, #1
 8002f00:	4606      	mov	r6, r0
 8002f02:	d1d6      	bne.n	8002eb2 <_svfiprintf_r+0x176>
 8002f04:	89ab      	ldrh	r3, [r5, #12]
 8002f06:	065b      	lsls	r3, r3, #25
 8002f08:	f53f af2c 	bmi.w	8002d64 <_svfiprintf_r+0x28>
 8002f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f0e:	b01d      	add	sp, #116	; 0x74
 8002f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f14:	ab03      	add	r3, sp, #12
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	462a      	mov	r2, r5
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <_svfiprintf_r+0x1fc>)
 8002f1e:	a904      	add	r1, sp, #16
 8002f20:	f000 f87c 	bl	800301c <_printf_i>
 8002f24:	e7eb      	b.n	8002efe <_svfiprintf_r+0x1c2>
 8002f26:	bf00      	nop
 8002f28:	08003584 	.word	0x08003584
 8002f2c:	0800358a 	.word	0x0800358a
 8002f30:	0800358e 	.word	0x0800358e
 8002f34:	00000000 	.word	0x00000000
 8002f38:	08002c85 	.word	0x08002c85

08002f3c <_printf_common>:
 8002f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f40:	4616      	mov	r6, r2
 8002f42:	4699      	mov	r9, r3
 8002f44:	688a      	ldr	r2, [r1, #8]
 8002f46:	690b      	ldr	r3, [r1, #16]
 8002f48:	4607      	mov	r7, r0
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	bfb8      	it	lt
 8002f4e:	4613      	movlt	r3, r2
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f56:	460c      	mov	r4, r1
 8002f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f5c:	b10a      	cbz	r2, 8002f62 <_printf_common+0x26>
 8002f5e:	3301      	adds	r3, #1
 8002f60:	6033      	str	r3, [r6, #0]
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	0699      	lsls	r1, r3, #26
 8002f66:	bf42      	ittt	mi
 8002f68:	6833      	ldrmi	r3, [r6, #0]
 8002f6a:	3302      	addmi	r3, #2
 8002f6c:	6033      	strmi	r3, [r6, #0]
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	f015 0506 	ands.w	r5, r5, #6
 8002f74:	d106      	bne.n	8002f84 <_printf_common+0x48>
 8002f76:	f104 0a19 	add.w	sl, r4, #25
 8002f7a:	68e3      	ldr	r3, [r4, #12]
 8002f7c:	6832      	ldr	r2, [r6, #0]
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	42ab      	cmp	r3, r5
 8002f82:	dc28      	bgt.n	8002fd6 <_printf_common+0x9a>
 8002f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f88:	1e13      	subs	r3, r2, #0
 8002f8a:	6822      	ldr	r2, [r4, #0]
 8002f8c:	bf18      	it	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	0692      	lsls	r2, r2, #26
 8002f92:	d42d      	bmi.n	8002ff0 <_printf_common+0xb4>
 8002f94:	4649      	mov	r1, r9
 8002f96:	4638      	mov	r0, r7
 8002f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f9c:	47c0      	blx	r8
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	d020      	beq.n	8002fe4 <_printf_common+0xa8>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	68e5      	ldr	r5, [r4, #12]
 8002fa6:	f003 0306 	and.w	r3, r3, #6
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	bf18      	it	ne
 8002fae:	2500      	movne	r5, #0
 8002fb0:	6832      	ldr	r2, [r6, #0]
 8002fb2:	f04f 0600 	mov.w	r6, #0
 8002fb6:	68a3      	ldr	r3, [r4, #8]
 8002fb8:	bf08      	it	eq
 8002fba:	1aad      	subeq	r5, r5, r2
 8002fbc:	6922      	ldr	r2, [r4, #16]
 8002fbe:	bf08      	it	eq
 8002fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bfc4      	itt	gt
 8002fc8:	1a9b      	subgt	r3, r3, r2
 8002fca:	18ed      	addgt	r5, r5, r3
 8002fcc:	341a      	adds	r4, #26
 8002fce:	42b5      	cmp	r5, r6
 8002fd0:	d11a      	bne.n	8003008 <_printf_common+0xcc>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	e008      	b.n	8002fe8 <_printf_common+0xac>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	4652      	mov	r2, sl
 8002fda:	4649      	mov	r1, r9
 8002fdc:	4638      	mov	r0, r7
 8002fde:	47c0      	blx	r8
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d103      	bne.n	8002fec <_printf_common+0xb0>
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fec:	3501      	adds	r5, #1
 8002fee:	e7c4      	b.n	8002f7a <_printf_common+0x3e>
 8002ff0:	2030      	movs	r0, #48	; 0x30
 8002ff2:	18e1      	adds	r1, r4, r3
 8002ff4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ffe:	4422      	add	r2, r4
 8003000:	3302      	adds	r3, #2
 8003002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003006:	e7c5      	b.n	8002f94 <_printf_common+0x58>
 8003008:	2301      	movs	r3, #1
 800300a:	4622      	mov	r2, r4
 800300c:	4649      	mov	r1, r9
 800300e:	4638      	mov	r0, r7
 8003010:	47c0      	blx	r8
 8003012:	3001      	adds	r0, #1
 8003014:	d0e6      	beq.n	8002fe4 <_printf_common+0xa8>
 8003016:	3601      	adds	r6, #1
 8003018:	e7d9      	b.n	8002fce <_printf_common+0x92>
	...

0800301c <_printf_i>:
 800301c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003020:	7e0f      	ldrb	r7, [r1, #24]
 8003022:	4691      	mov	r9, r2
 8003024:	2f78      	cmp	r7, #120	; 0x78
 8003026:	4680      	mov	r8, r0
 8003028:	460c      	mov	r4, r1
 800302a:	469a      	mov	sl, r3
 800302c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800302e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003032:	d807      	bhi.n	8003044 <_printf_i+0x28>
 8003034:	2f62      	cmp	r7, #98	; 0x62
 8003036:	d80a      	bhi.n	800304e <_printf_i+0x32>
 8003038:	2f00      	cmp	r7, #0
 800303a:	f000 80d9 	beq.w	80031f0 <_printf_i+0x1d4>
 800303e:	2f58      	cmp	r7, #88	; 0x58
 8003040:	f000 80a4 	beq.w	800318c <_printf_i+0x170>
 8003044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800304c:	e03a      	b.n	80030c4 <_printf_i+0xa8>
 800304e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003052:	2b15      	cmp	r3, #21
 8003054:	d8f6      	bhi.n	8003044 <_printf_i+0x28>
 8003056:	a101      	add	r1, pc, #4	; (adr r1, 800305c <_printf_i+0x40>)
 8003058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800305c:	080030b5 	.word	0x080030b5
 8003060:	080030c9 	.word	0x080030c9
 8003064:	08003045 	.word	0x08003045
 8003068:	08003045 	.word	0x08003045
 800306c:	08003045 	.word	0x08003045
 8003070:	08003045 	.word	0x08003045
 8003074:	080030c9 	.word	0x080030c9
 8003078:	08003045 	.word	0x08003045
 800307c:	08003045 	.word	0x08003045
 8003080:	08003045 	.word	0x08003045
 8003084:	08003045 	.word	0x08003045
 8003088:	080031d7 	.word	0x080031d7
 800308c:	080030f9 	.word	0x080030f9
 8003090:	080031b9 	.word	0x080031b9
 8003094:	08003045 	.word	0x08003045
 8003098:	08003045 	.word	0x08003045
 800309c:	080031f9 	.word	0x080031f9
 80030a0:	08003045 	.word	0x08003045
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	08003045 	.word	0x08003045
 80030ac:	08003045 	.word	0x08003045
 80030b0:	080031c1 	.word	0x080031c1
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	1d1a      	adds	r2, r3, #4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	602a      	str	r2, [r5, #0]
 80030bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0a4      	b.n	8003212 <_printf_i+0x1f6>
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	6829      	ldr	r1, [r5, #0]
 80030cc:	0606      	lsls	r6, r0, #24
 80030ce:	f101 0304 	add.w	r3, r1, #4
 80030d2:	d50a      	bpl.n	80030ea <_printf_i+0xce>
 80030d4:	680e      	ldr	r6, [r1, #0]
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	2e00      	cmp	r6, #0
 80030da:	da03      	bge.n	80030e4 <_printf_i+0xc8>
 80030dc:	232d      	movs	r3, #45	; 0x2d
 80030de:	4276      	negs	r6, r6
 80030e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e4:	230a      	movs	r3, #10
 80030e6:	485e      	ldr	r0, [pc, #376]	; (8003260 <_printf_i+0x244>)
 80030e8:	e019      	b.n	800311e <_printf_i+0x102>
 80030ea:	680e      	ldr	r6, [r1, #0]
 80030ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	bf18      	it	ne
 80030f4:	b236      	sxthne	r6, r6
 80030f6:	e7ef      	b.n	80030d8 <_printf_i+0xbc>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	6820      	ldr	r0, [r4, #0]
 80030fc:	1d19      	adds	r1, r3, #4
 80030fe:	6029      	str	r1, [r5, #0]
 8003100:	0601      	lsls	r1, r0, #24
 8003102:	d501      	bpl.n	8003108 <_printf_i+0xec>
 8003104:	681e      	ldr	r6, [r3, #0]
 8003106:	e002      	b.n	800310e <_printf_i+0xf2>
 8003108:	0646      	lsls	r6, r0, #25
 800310a:	d5fb      	bpl.n	8003104 <_printf_i+0xe8>
 800310c:	881e      	ldrh	r6, [r3, #0]
 800310e:	2f6f      	cmp	r7, #111	; 0x6f
 8003110:	bf0c      	ite	eq
 8003112:	2308      	moveq	r3, #8
 8003114:	230a      	movne	r3, #10
 8003116:	4852      	ldr	r0, [pc, #328]	; (8003260 <_printf_i+0x244>)
 8003118:	2100      	movs	r1, #0
 800311a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800311e:	6865      	ldr	r5, [r4, #4]
 8003120:	2d00      	cmp	r5, #0
 8003122:	bfa8      	it	ge
 8003124:	6821      	ldrge	r1, [r4, #0]
 8003126:	60a5      	str	r5, [r4, #8]
 8003128:	bfa4      	itt	ge
 800312a:	f021 0104 	bicge.w	r1, r1, #4
 800312e:	6021      	strge	r1, [r4, #0]
 8003130:	b90e      	cbnz	r6, 8003136 <_printf_i+0x11a>
 8003132:	2d00      	cmp	r5, #0
 8003134:	d04d      	beq.n	80031d2 <_printf_i+0x1b6>
 8003136:	4615      	mov	r5, r2
 8003138:	fbb6 f1f3 	udiv	r1, r6, r3
 800313c:	fb03 6711 	mls	r7, r3, r1, r6
 8003140:	5dc7      	ldrb	r7, [r0, r7]
 8003142:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003146:	4637      	mov	r7, r6
 8003148:	42bb      	cmp	r3, r7
 800314a:	460e      	mov	r6, r1
 800314c:	d9f4      	bls.n	8003138 <_printf_i+0x11c>
 800314e:	2b08      	cmp	r3, #8
 8003150:	d10b      	bne.n	800316a <_printf_i+0x14e>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	07de      	lsls	r6, r3, #31
 8003156:	d508      	bpl.n	800316a <_printf_i+0x14e>
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	6861      	ldr	r1, [r4, #4]
 800315c:	4299      	cmp	r1, r3
 800315e:	bfde      	ittt	le
 8003160:	2330      	movle	r3, #48	; 0x30
 8003162:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003166:	f105 35ff 	addle.w	r5, r5, #4294967295
 800316a:	1b52      	subs	r2, r2, r5
 800316c:	6122      	str	r2, [r4, #16]
 800316e:	464b      	mov	r3, r9
 8003170:	4621      	mov	r1, r4
 8003172:	4640      	mov	r0, r8
 8003174:	f8cd a000 	str.w	sl, [sp]
 8003178:	aa03      	add	r2, sp, #12
 800317a:	f7ff fedf 	bl	8002f3c <_printf_common>
 800317e:	3001      	adds	r0, #1
 8003180:	d14c      	bne.n	800321c <_printf_i+0x200>
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	b004      	add	sp, #16
 8003188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318c:	4834      	ldr	r0, [pc, #208]	; (8003260 <_printf_i+0x244>)
 800318e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003192:	6829      	ldr	r1, [r5, #0]
 8003194:	6823      	ldr	r3, [r4, #0]
 8003196:	f851 6b04 	ldr.w	r6, [r1], #4
 800319a:	6029      	str	r1, [r5, #0]
 800319c:	061d      	lsls	r5, r3, #24
 800319e:	d514      	bpl.n	80031ca <_printf_i+0x1ae>
 80031a0:	07df      	lsls	r7, r3, #31
 80031a2:	bf44      	itt	mi
 80031a4:	f043 0320 	orrmi.w	r3, r3, #32
 80031a8:	6023      	strmi	r3, [r4, #0]
 80031aa:	b91e      	cbnz	r6, 80031b4 <_printf_i+0x198>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	f023 0320 	bic.w	r3, r3, #32
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	2310      	movs	r3, #16
 80031b6:	e7af      	b.n	8003118 <_printf_i+0xfc>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	2378      	movs	r3, #120	; 0x78
 80031c2:	4828      	ldr	r0, [pc, #160]	; (8003264 <_printf_i+0x248>)
 80031c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031c8:	e7e3      	b.n	8003192 <_printf_i+0x176>
 80031ca:	0659      	lsls	r1, r3, #25
 80031cc:	bf48      	it	mi
 80031ce:	b2b6      	uxthmi	r6, r6
 80031d0:	e7e6      	b.n	80031a0 <_printf_i+0x184>
 80031d2:	4615      	mov	r5, r2
 80031d4:	e7bb      	b.n	800314e <_printf_i+0x132>
 80031d6:	682b      	ldr	r3, [r5, #0]
 80031d8:	6826      	ldr	r6, [r4, #0]
 80031da:	1d18      	adds	r0, r3, #4
 80031dc:	6961      	ldr	r1, [r4, #20]
 80031de:	6028      	str	r0, [r5, #0]
 80031e0:	0635      	lsls	r5, r6, #24
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	d501      	bpl.n	80031ea <_printf_i+0x1ce>
 80031e6:	6019      	str	r1, [r3, #0]
 80031e8:	e002      	b.n	80031f0 <_printf_i+0x1d4>
 80031ea:	0670      	lsls	r0, r6, #25
 80031ec:	d5fb      	bpl.n	80031e6 <_printf_i+0x1ca>
 80031ee:	8019      	strh	r1, [r3, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	4615      	mov	r5, r2
 80031f4:	6123      	str	r3, [r4, #16]
 80031f6:	e7ba      	b.n	800316e <_printf_i+0x152>
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	2100      	movs	r1, #0
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	602a      	str	r2, [r5, #0]
 8003200:	681d      	ldr	r5, [r3, #0]
 8003202:	6862      	ldr	r2, [r4, #4]
 8003204:	4628      	mov	r0, r5
 8003206:	f000 f82f 	bl	8003268 <memchr>
 800320a:	b108      	cbz	r0, 8003210 <_printf_i+0x1f4>
 800320c:	1b40      	subs	r0, r0, r5
 800320e:	6060      	str	r0, [r4, #4]
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	6123      	str	r3, [r4, #16]
 8003214:	2300      	movs	r3, #0
 8003216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321a:	e7a8      	b.n	800316e <_printf_i+0x152>
 800321c:	462a      	mov	r2, r5
 800321e:	4649      	mov	r1, r9
 8003220:	4640      	mov	r0, r8
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	47d0      	blx	sl
 8003226:	3001      	adds	r0, #1
 8003228:	d0ab      	beq.n	8003182 <_printf_i+0x166>
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	079b      	lsls	r3, r3, #30
 800322e:	d413      	bmi.n	8003258 <_printf_i+0x23c>
 8003230:	68e0      	ldr	r0, [r4, #12]
 8003232:	9b03      	ldr	r3, [sp, #12]
 8003234:	4298      	cmp	r0, r3
 8003236:	bfb8      	it	lt
 8003238:	4618      	movlt	r0, r3
 800323a:	e7a4      	b.n	8003186 <_printf_i+0x16a>
 800323c:	2301      	movs	r3, #1
 800323e:	4632      	mov	r2, r6
 8003240:	4649      	mov	r1, r9
 8003242:	4640      	mov	r0, r8
 8003244:	47d0      	blx	sl
 8003246:	3001      	adds	r0, #1
 8003248:	d09b      	beq.n	8003182 <_printf_i+0x166>
 800324a:	3501      	adds	r5, #1
 800324c:	68e3      	ldr	r3, [r4, #12]
 800324e:	9903      	ldr	r1, [sp, #12]
 8003250:	1a5b      	subs	r3, r3, r1
 8003252:	42ab      	cmp	r3, r5
 8003254:	dcf2      	bgt.n	800323c <_printf_i+0x220>
 8003256:	e7eb      	b.n	8003230 <_printf_i+0x214>
 8003258:	2500      	movs	r5, #0
 800325a:	f104 0619 	add.w	r6, r4, #25
 800325e:	e7f5      	b.n	800324c <_printf_i+0x230>
 8003260:	08003595 	.word	0x08003595
 8003264:	080035a6 	.word	0x080035a6

08003268 <memchr>:
 8003268:	4603      	mov	r3, r0
 800326a:	b510      	push	{r4, lr}
 800326c:	b2c9      	uxtb	r1, r1
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	4618      	mov	r0, r3
 8003274:	d101      	bne.n	800327a <memchr+0x12>
 8003276:	2000      	movs	r0, #0
 8003278:	e003      	b.n	8003282 <memchr+0x1a>
 800327a:	7804      	ldrb	r4, [r0, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	428c      	cmp	r4, r1
 8003280:	d1f6      	bne.n	8003270 <memchr+0x8>
 8003282:	bd10      	pop	{r4, pc}

08003284 <memcpy>:
 8003284:	440a      	add	r2, r1
 8003286:	4291      	cmp	r1, r2
 8003288:	f100 33ff 	add.w	r3, r0, #4294967295
 800328c:	d100      	bne.n	8003290 <memcpy+0xc>
 800328e:	4770      	bx	lr
 8003290:	b510      	push	{r4, lr}
 8003292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003296:	4291      	cmp	r1, r2
 8003298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800329c:	d1f9      	bne.n	8003292 <memcpy+0xe>
 800329e:	bd10      	pop	{r4, pc}

080032a0 <memmove>:
 80032a0:	4288      	cmp	r0, r1
 80032a2:	b510      	push	{r4, lr}
 80032a4:	eb01 0402 	add.w	r4, r1, r2
 80032a8:	d902      	bls.n	80032b0 <memmove+0x10>
 80032aa:	4284      	cmp	r4, r0
 80032ac:	4623      	mov	r3, r4
 80032ae:	d807      	bhi.n	80032c0 <memmove+0x20>
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	42a1      	cmp	r1, r4
 80032b4:	d008      	beq.n	80032c8 <memmove+0x28>
 80032b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032be:	e7f8      	b.n	80032b2 <memmove+0x12>
 80032c0:	4601      	mov	r1, r0
 80032c2:	4402      	add	r2, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	d100      	bne.n	80032ca <memmove+0x2a>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032d2:	e7f7      	b.n	80032c4 <memmove+0x24>

080032d4 <_free_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4605      	mov	r5, r0
 80032d8:	2900      	cmp	r1, #0
 80032da:	d040      	beq.n	800335e <_free_r+0x8a>
 80032dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e0:	1f0c      	subs	r4, r1, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bfb8      	it	lt
 80032e6:	18e4      	addlt	r4, r4, r3
 80032e8:	f000 f910 	bl	800350c <__malloc_lock>
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <_free_r+0x8c>)
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	b933      	cbnz	r3, 8003300 <_free_r+0x2c>
 80032f2:	6063      	str	r3, [r4, #4]
 80032f4:	6014      	str	r4, [r2, #0]
 80032f6:	4628      	mov	r0, r5
 80032f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032fc:	f000 b90c 	b.w	8003518 <__malloc_unlock>
 8003300:	42a3      	cmp	r3, r4
 8003302:	d908      	bls.n	8003316 <_free_r+0x42>
 8003304:	6820      	ldr	r0, [r4, #0]
 8003306:	1821      	adds	r1, r4, r0
 8003308:	428b      	cmp	r3, r1
 800330a:	bf01      	itttt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	1809      	addeq	r1, r1, r0
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	e7ed      	b.n	80032f2 <_free_r+0x1e>
 8003316:	461a      	mov	r2, r3
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b10b      	cbz	r3, 8003320 <_free_r+0x4c>
 800331c:	42a3      	cmp	r3, r4
 800331e:	d9fa      	bls.n	8003316 <_free_r+0x42>
 8003320:	6811      	ldr	r1, [r2, #0]
 8003322:	1850      	adds	r0, r2, r1
 8003324:	42a0      	cmp	r0, r4
 8003326:	d10b      	bne.n	8003340 <_free_r+0x6c>
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	4401      	add	r1, r0
 800332c:	1850      	adds	r0, r2, r1
 800332e:	4283      	cmp	r3, r0
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	d1e0      	bne.n	80032f6 <_free_r+0x22>
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4401      	add	r1, r0
 800333a:	6011      	str	r1, [r2, #0]
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	e7da      	b.n	80032f6 <_free_r+0x22>
 8003340:	d902      	bls.n	8003348 <_free_r+0x74>
 8003342:	230c      	movs	r3, #12
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	e7d6      	b.n	80032f6 <_free_r+0x22>
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	1821      	adds	r1, r4, r0
 800334c:	428b      	cmp	r3, r1
 800334e:	bf01      	itttt	eq
 8003350:	6819      	ldreq	r1, [r3, #0]
 8003352:	685b      	ldreq	r3, [r3, #4]
 8003354:	1809      	addeq	r1, r1, r0
 8003356:	6021      	streq	r1, [r4, #0]
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	6054      	str	r4, [r2, #4]
 800335c:	e7cb      	b.n	80032f6 <_free_r+0x22>
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000210 	.word	0x20000210

08003364 <sbrk_aligned>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4e0e      	ldr	r6, [pc, #56]	; (80033a0 <sbrk_aligned+0x3c>)
 8003368:	460c      	mov	r4, r1
 800336a:	6831      	ldr	r1, [r6, #0]
 800336c:	4605      	mov	r5, r0
 800336e:	b911      	cbnz	r1, 8003376 <sbrk_aligned+0x12>
 8003370:	f000 f8bc 	bl	80034ec <_sbrk_r>
 8003374:	6030      	str	r0, [r6, #0]
 8003376:	4621      	mov	r1, r4
 8003378:	4628      	mov	r0, r5
 800337a:	f000 f8b7 	bl	80034ec <_sbrk_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	d00a      	beq.n	8003398 <sbrk_aligned+0x34>
 8003382:	1cc4      	adds	r4, r0, #3
 8003384:	f024 0403 	bic.w	r4, r4, #3
 8003388:	42a0      	cmp	r0, r4
 800338a:	d007      	beq.n	800339c <sbrk_aligned+0x38>
 800338c:	1a21      	subs	r1, r4, r0
 800338e:	4628      	mov	r0, r5
 8003390:	f000 f8ac 	bl	80034ec <_sbrk_r>
 8003394:	3001      	adds	r0, #1
 8003396:	d101      	bne.n	800339c <sbrk_aligned+0x38>
 8003398:	f04f 34ff 	mov.w	r4, #4294967295
 800339c:	4620      	mov	r0, r4
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	20000214 	.word	0x20000214

080033a4 <_malloc_r>:
 80033a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a8:	1ccd      	adds	r5, r1, #3
 80033aa:	f025 0503 	bic.w	r5, r5, #3
 80033ae:	3508      	adds	r5, #8
 80033b0:	2d0c      	cmp	r5, #12
 80033b2:	bf38      	it	cc
 80033b4:	250c      	movcc	r5, #12
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	4607      	mov	r7, r0
 80033ba:	db01      	blt.n	80033c0 <_malloc_r+0x1c>
 80033bc:	42a9      	cmp	r1, r5
 80033be:	d905      	bls.n	80033cc <_malloc_r+0x28>
 80033c0:	230c      	movs	r3, #12
 80033c2:	2600      	movs	r6, #0
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4630      	mov	r0, r6
 80033c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033cc:	4e2e      	ldr	r6, [pc, #184]	; (8003488 <_malloc_r+0xe4>)
 80033ce:	f000 f89d 	bl	800350c <__malloc_lock>
 80033d2:	6833      	ldr	r3, [r6, #0]
 80033d4:	461c      	mov	r4, r3
 80033d6:	bb34      	cbnz	r4, 8003426 <_malloc_r+0x82>
 80033d8:	4629      	mov	r1, r5
 80033da:	4638      	mov	r0, r7
 80033dc:	f7ff ffc2 	bl	8003364 <sbrk_aligned>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	4604      	mov	r4, r0
 80033e4:	d14d      	bne.n	8003482 <_malloc_r+0xde>
 80033e6:	6834      	ldr	r4, [r6, #0]
 80033e8:	4626      	mov	r6, r4
 80033ea:	2e00      	cmp	r6, #0
 80033ec:	d140      	bne.n	8003470 <_malloc_r+0xcc>
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	4631      	mov	r1, r6
 80033f2:	4638      	mov	r0, r7
 80033f4:	eb04 0803 	add.w	r8, r4, r3
 80033f8:	f000 f878 	bl	80034ec <_sbrk_r>
 80033fc:	4580      	cmp	r8, r0
 80033fe:	d13a      	bne.n	8003476 <_malloc_r+0xd2>
 8003400:	6821      	ldr	r1, [r4, #0]
 8003402:	3503      	adds	r5, #3
 8003404:	1a6d      	subs	r5, r5, r1
 8003406:	f025 0503 	bic.w	r5, r5, #3
 800340a:	3508      	adds	r5, #8
 800340c:	2d0c      	cmp	r5, #12
 800340e:	bf38      	it	cc
 8003410:	250c      	movcc	r5, #12
 8003412:	4638      	mov	r0, r7
 8003414:	4629      	mov	r1, r5
 8003416:	f7ff ffa5 	bl	8003364 <sbrk_aligned>
 800341a:	3001      	adds	r0, #1
 800341c:	d02b      	beq.n	8003476 <_malloc_r+0xd2>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	442b      	add	r3, r5
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	e00e      	b.n	8003444 <_malloc_r+0xa0>
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	1b52      	subs	r2, r2, r5
 800342a:	d41e      	bmi.n	800346a <_malloc_r+0xc6>
 800342c:	2a0b      	cmp	r2, #11
 800342e:	d916      	bls.n	800345e <_malloc_r+0xba>
 8003430:	1961      	adds	r1, r4, r5
 8003432:	42a3      	cmp	r3, r4
 8003434:	6025      	str	r5, [r4, #0]
 8003436:	bf18      	it	ne
 8003438:	6059      	strne	r1, [r3, #4]
 800343a:	6863      	ldr	r3, [r4, #4]
 800343c:	bf08      	it	eq
 800343e:	6031      	streq	r1, [r6, #0]
 8003440:	5162      	str	r2, [r4, r5]
 8003442:	604b      	str	r3, [r1, #4]
 8003444:	4638      	mov	r0, r7
 8003446:	f104 060b 	add.w	r6, r4, #11
 800344a:	f000 f865 	bl	8003518 <__malloc_unlock>
 800344e:	f026 0607 	bic.w	r6, r6, #7
 8003452:	1d23      	adds	r3, r4, #4
 8003454:	1af2      	subs	r2, r6, r3
 8003456:	d0b6      	beq.n	80033c6 <_malloc_r+0x22>
 8003458:	1b9b      	subs	r3, r3, r6
 800345a:	50a3      	str	r3, [r4, r2]
 800345c:	e7b3      	b.n	80033c6 <_malloc_r+0x22>
 800345e:	6862      	ldr	r2, [r4, #4]
 8003460:	42a3      	cmp	r3, r4
 8003462:	bf0c      	ite	eq
 8003464:	6032      	streq	r2, [r6, #0]
 8003466:	605a      	strne	r2, [r3, #4]
 8003468:	e7ec      	b.n	8003444 <_malloc_r+0xa0>
 800346a:	4623      	mov	r3, r4
 800346c:	6864      	ldr	r4, [r4, #4]
 800346e:	e7b2      	b.n	80033d6 <_malloc_r+0x32>
 8003470:	4634      	mov	r4, r6
 8003472:	6876      	ldr	r6, [r6, #4]
 8003474:	e7b9      	b.n	80033ea <_malloc_r+0x46>
 8003476:	230c      	movs	r3, #12
 8003478:	4638      	mov	r0, r7
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	f000 f84c 	bl	8003518 <__malloc_unlock>
 8003480:	e7a1      	b.n	80033c6 <_malloc_r+0x22>
 8003482:	6025      	str	r5, [r4, #0]
 8003484:	e7de      	b.n	8003444 <_malloc_r+0xa0>
 8003486:	bf00      	nop
 8003488:	20000210 	.word	0x20000210

0800348c <_realloc_r>:
 800348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003490:	4680      	mov	r8, r0
 8003492:	4614      	mov	r4, r2
 8003494:	460e      	mov	r6, r1
 8003496:	b921      	cbnz	r1, 80034a2 <_realloc_r+0x16>
 8003498:	4611      	mov	r1, r2
 800349a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800349e:	f7ff bf81 	b.w	80033a4 <_malloc_r>
 80034a2:	b92a      	cbnz	r2, 80034b0 <_realloc_r+0x24>
 80034a4:	f7ff ff16 	bl	80032d4 <_free_r>
 80034a8:	4625      	mov	r5, r4
 80034aa:	4628      	mov	r0, r5
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034b0:	f000 f838 	bl	8003524 <_malloc_usable_size_r>
 80034b4:	4284      	cmp	r4, r0
 80034b6:	4607      	mov	r7, r0
 80034b8:	d802      	bhi.n	80034c0 <_realloc_r+0x34>
 80034ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034be:	d812      	bhi.n	80034e6 <_realloc_r+0x5a>
 80034c0:	4621      	mov	r1, r4
 80034c2:	4640      	mov	r0, r8
 80034c4:	f7ff ff6e 	bl	80033a4 <_malloc_r>
 80034c8:	4605      	mov	r5, r0
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d0ed      	beq.n	80034aa <_realloc_r+0x1e>
 80034ce:	42bc      	cmp	r4, r7
 80034d0:	4622      	mov	r2, r4
 80034d2:	4631      	mov	r1, r6
 80034d4:	bf28      	it	cs
 80034d6:	463a      	movcs	r2, r7
 80034d8:	f7ff fed4 	bl	8003284 <memcpy>
 80034dc:	4631      	mov	r1, r6
 80034de:	4640      	mov	r0, r8
 80034e0:	f7ff fef8 	bl	80032d4 <_free_r>
 80034e4:	e7e1      	b.n	80034aa <_realloc_r+0x1e>
 80034e6:	4635      	mov	r5, r6
 80034e8:	e7df      	b.n	80034aa <_realloc_r+0x1e>
	...

080034ec <_sbrk_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	2300      	movs	r3, #0
 80034f0:	4d05      	ldr	r5, [pc, #20]	; (8003508 <_sbrk_r+0x1c>)
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	f7fd fb12 	bl	8000b20 <_sbrk>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d102      	bne.n	8003506 <_sbrk_r+0x1a>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	b103      	cbz	r3, 8003506 <_sbrk_r+0x1a>
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	20000218 	.word	0x20000218

0800350c <__malloc_lock>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__malloc_lock+0x8>)
 800350e:	f000 b811 	b.w	8003534 <__retarget_lock_acquire_recursive>
 8003512:	bf00      	nop
 8003514:	2000021c 	.word	0x2000021c

08003518 <__malloc_unlock>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__malloc_unlock+0x8>)
 800351a:	f000 b80c 	b.w	8003536 <__retarget_lock_release_recursive>
 800351e:	bf00      	nop
 8003520:	2000021c 	.word	0x2000021c

08003524 <_malloc_usable_size_r>:
 8003524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003528:	1f18      	subs	r0, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	bfbc      	itt	lt
 800352e:	580b      	ldrlt	r3, [r1, r0]
 8003530:	18c0      	addlt	r0, r0, r3
 8003532:	4770      	bx	lr

08003534 <__retarget_lock_acquire_recursive>:
 8003534:	4770      	bx	lr

08003536 <__retarget_lock_release_recursive>:
 8003536:	4770      	bx	lr

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
